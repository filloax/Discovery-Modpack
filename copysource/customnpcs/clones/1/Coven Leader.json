{
    "ReturnToStart": 0b,
    "NpcInv": [
    ],
    "PotionEffect": 2,
    "Size": 5,
    "stopAndInteract": 1b,
    "Resistances": {
        "Arrow": 1.8028169f,
        "Explosion": 1.0f,
        "Knockback": 2.0f,
        "Melee": 1.0f
    },
    "BossBar": 1b,
    "RespawnTime": 0,
    "NpcAngrySound": "",
    "ReactsToFire": 0b,
    "IgnoreCobweb": 1b,
    "PositionOffsetZ": 5.0f,
    "PositionOffsetY": 5.0f,
    "PositionOffsetX": 5.0f,
    "LootMode": 0,
    "TransformHasAI": 0b,
    "AttackStrenght": 10,
    "PersistenceRequired": 0b,
    "id": "customnpcs.CustomNpc",
    "HealF": 1.0f,
    "MovingPatern": 0,
    "NpcLines": {
        "Lines": [
        ]
    },
    "DefendFaction": 0b,
    "FireIndirect": 0,
    "NpcVisible": 0,
    "LinkedNpcName": "",
    "FindShelter": 2,
    "ScriptsContainers": [
        {
            "Script": "//If it's 0/null, it has been spawned with the cloner and it will do the init each time.
	//The Corpse npc sets it to 1 after spawning. If it's 1, it will be set to 2 after doing the stuff.
	//If it's 2, don't do anything.
	var startedControl = npc.getStoredData(\"startedControl\");
	
//npc.say(startedControl);
	if (startedControl != 2) {
	
		//Variables starting with f are function locals
		
		//Throw players back
		var throwBack = function(player,strengthx,strengthy) {
			var fmcp = player.getMCEntity();
			if (!strengthx) {strengthx = 1}
			if (!strengthy) {strengthy = 1}
			
			//addVelocity(double,double,double)
			fmcp.func_70024_g(-3.5*strengthx,1.0*strengthy,Math.random()-0.5);
			//velocityChanged
			fmcp.field_70133_I = true;
		}
		npc.setStoredData(\"throwBack\",throwBack.toString());
			
		//Fill from first coords to second coords with block of dmg and nbt
		//Replaces only specified block if specified
		var fill = function(x,y,z,x2,y2,z2,block,dmg,nbt,replaceSolid,replaceWhat,debug) {
			if (replaceSolid == undefined || replaceSolid === null) {replaceSolid = false;}
			if (debug == undefined || debug === null) {debug = false;}
			
			if (x2<x || y2<y || z2<z) {
				npc.say(\"Wrong usage of fill, the second coords should be higher!\");
			} else {
				for (i=0;i<(x2-x+1);i++) {
					for (j=0;j<(y2-y+1);j++) {			
						for (k=0;k<(z2-z+1);k++) {
							var blockTest = world.getBlock(x+i,y+j,z+k);
							if (replaceSolid && blockTest !== null) {
								if (replaceWhat == undefined || replaceWhat === null || blockTest.getName() == replaceWhat) {
									npc.executeCommand(\"/setblock \"+(x+i)+\" \"+(y+j)+\" \"+(z+k)+\" \"+block+\" \"+dmg+\" replace \"+nbt);
								}
								if (debug) {npc.say(block);}
							} else if (blockTest === null) {
								npc.executeCommand(\"/setblock \"+(x+i)+\" \"+(y+j)+\" \"+(z+k)+\" \"+block+\" \"+dmg+\" replace \"+nbt);
								if (debug) {npc.say(block);}							
							}
						}
					}
				}
			}
		}
		npc.setStoredData(\"fill\",fill.toString());
		
		var getRandArr = function(array) {
			return(array[Math.floor(Math.random()*array.length)]);
		}
		npc.setStoredData(\"getRandArr\",getRandArr.toString());
		
		var players = npc.getSurroundingEntities(10,1);
		if (players !== null) {
			for (i=0;i<players.length;i++) {
				throwBack(players[i]);
			}
		}
		npc.setTempData(\"thrownPlayers\",players);
		
		npc.setStoredData(\"count\",0);
		npc.setStoredData(\"phase\",\"start\");
		npc.setStoredData(\"hitcount\",0);
		npc.setHealth(1);
		npc.setCombatRegen(50);
		npc.setHealthRegen(50);
		npc.setTempData(\"maxCountBarrier\",\"reset\");
		npc.setStoredData(\"ox\",npc.getBlockX());
		npc.setStoredData(\"oy\",npc.getBlockY());
		npc.setStoredData(\"oz\",npc.getBlockZ());
		npc.setTempData(\"pCount\",0);
		npc.clearPotionEffects();
		npc.setRetaliateType(3);
		npc.setVisibleType(0);
		
		if (startedControl == 1) {
			npc.setStoredData(\"startedControl\",2);
		}
	}",
            "ScriptConsole": "",
            "Type": 0,
            "ScriptList": [
            ]
        },
        {
            "Script": "var throwBack = eval(npc.getStoredData(\"throwBack\"));
var fill = eval(npc.getStoredData(\"fill\"));
var getRandArr = eval(npc.getStoredData(\"getRandArr\"));

var phase = npc.getStoredData(\"phase\");
var count = npc.getStoredData(\"count\");
var health = npc.getHealth();
var maxHealth = npc.getMaxHealth();

var ox = npc.getStoredData(\"ox\");
var oy = npc.getStoredData(\"oy\");
var oz = npc.getStoredData(\"oz\");

//////////////////
//START
//////////////////
if (phase == \"start\") {
	//go to first phase when npc's health fully charges
	if (health == maxHealth) {
		count = 0;
		npc.setHealthRegen(1);
		npc.setCombatRegen(0);
		npc.setStoredData(\"phase\",\"barrier1\");
		// npc.say(\"phase barrier 1\")
	} else {
		//Encase thrown players in barrier after a while
		if (count < 2) {
			count++;
		} else if (count == 2) {
			if (npc.hasTempData(\"thrownPlayers\")) {
				var players = npc.getTempData(\"thrownPlayers\");
				for (i=0;i<players.length;i++) {
					var px = players[i].getX();
					var py = players[i].getY();
					var pz = players[i].getZ();
					
					var barrierTicks = maxHealth/npc.getCombatRegen()*20;
					
					fill(px-2,py-2,pz-2,px+2,py+2,pz+2,\"witchery:barrier\",0,\"{remainingTicks:\"+barrierTicks+\",blocksPlayers:1}\");
					fill(px-1,py-1,pz-1,px+1,py+1,pz+1,\"air\",0,\"\",true,\"witchery:barrier\");
				}
			}
			count++;
		}
	}
////////////////////
//FIGHT PHASES
////////////////////
} else if (phase == \"barrier1\" || phase == \"barrier2\" || phase == \"giant\") {
	//Stay at starting position
	if (phase == \"barrier1\" || phase == \"barrier2\") {
		npc.setPosition(ox+0.5,oy,oz+0.5);
		if (world.getBlock(ox,oy-1,oz) == null) {
			world.setBlock(ox,oy-1,oz,world.createItem(\"minecraft:bedrock\",0,1));
		}
	}
	
	//Get players and only do stuff if sat least 1 is found
	var players = npc.getSurroundingEntities(40,1);
	if (players !== null) {
		var px = players[0].getBlockX();
		var py = players[0].getBlockY();
		var pz = players[0].getBlockZ();
		var debug;
		if (players[0].getHeldItem() !== null) {
			debug = players[0].getHeldItem().getName() == \"customnpcs:npcScripter\" || players[0].getHeldItem().getName() == \"customnpcs:npcWand\" || players[0].getHeldItem().getName() == \"customnpcs:npcMobCloner\";
		}
		var barrierTicks = 200;
		
		//Stay giant if npc is giant, effect 59 is resizing
		var resizing = 59;
		
		if (phase == \"giant\" && npc.getPotionEffect(59) == -1) {
			npc.addPotionEffect(59,100000,2,true);
		}
		
		///////////
		//SUMMONING
		///////////

		var countSummon = npc.getTempData(\"countSummon\"); //This is another tempdata because it needs to be counted separately, yes ik this is getting spaghetti
														  //BTW it's for summoning mobs
		var maxCountSummon;
		if (!npc.hasTempData(\"maxCountSummon\") || npc.getTempData(\"maxCountSummon\") == \"reset\") {
			maxCountSummon = 3 + Math.random()*6;
		} else {
			maxCountSummon = npc.getTempData(\"maxCountSummon\");
		}
		
		if (countSummon >= maxCountSummon && !debug) {
			maxCountSummon = \"reset\";
			countSummon = 0;
			
			//Summon stuff
			var rand = Math.random();
			// var qrand = Math.sqrt(rand ^ 2); //Module of rand
			// var vrand = rand / qrand; //Verse of rand
			
			//The x should go from 1 block behind player to 9 blocks in front,
			//the z +- 6 max, the y equal
			var x = px + 4 + rand*5;
			var y = py;
			var z = pz + rand*6 - 3;
			
			//Choose between Hungry and Stabby Zombies or Wraiths during barrier phases, weaker undead witches in the giant phase
			var mob = (phase != \"giant\") ? ((Math.random() < 0.5) ? ((Math.random() < 0.2) ? \"Stabby Zombie\" : \"Hungry Zombie\") : \"Summoned Wraith\") : \"Lesser Undead Witch\";
			
			if (world.getBlock(x,y,z) === null) {
				world.spawnClone(x,y,z,1,mob);
			}
		} else {
			countSummon++;
		}
					
		////////////////
		//POTIONS
		///////////////
		
		var countPotion = npc.getTempData(\"countPotion\"); //This is yet another tempdata for throwing potions
		var maxCountPotion; //Between 3 and 8 seconds
		
		//Effect item string
		var effects = [
		[\"{id:minecraft:glowstone_dust},{id:minecraft:stick}\"],  //knockback
		[\"{id:minecraft:fermented_spider_eye},{id:minecraft:speckled_melon}\"],  //hurting
		[\"{id:minecraft:fermented_spider_eye},{id:minecraft:sugar}\"],  //slowness
		[\"{id:minecraft:spider_eye}\"],  //poison
		[\"{id:witchery:ingredient,Damage:23}\"]]; //demon heart, paralysis
					
		if (!npc.hasTempData(\"maxCountPotion\") || npc.getTempData(\"maxCountPotion\") == \"reset\") {
			maxCountPotion = 6 + Math.random()*10;
		} else {
			maxCountPotion = npc.getTempData(\"maxCountPotion\");
		}
		
		if (countPotion >= maxCountPotion && !debug) {
			maxCountPotion = \"reset\";
			countPotion = 0;
			
			var cx = px+Math.random()*4-2;
			var cy = oy+1;
			var cz = pz+Math.random()*4-2;
			var command = '/summon2 witchery.brew2 '+cx+' '+cy+' '+cz+' {Brew:{id:witchery:brewbottle,tag:{Splash:1,Color:'+(Math.random()*Math.pow(10, 8))+',EffectCount:1,Items:[{id:witchery:ingredient,Damage:22},{id:minecraft:nether_wart},{id:witchery:ingredient,Damage:37},'+getRandArr(effects)+',{id:minecraft:gunpowder}]}},Air:300,inTile:-1,xTile:-1,yTile:-1,zTile:-1,Motion:[0.0,0.3,0.0]}';
			
			// npc.executeCommand('/tellraw @a \"'+command+'\"');

			npc.executeCommand(command);
			npc.executeCommand('/playsound magic.swosh @a '+cx+' '+cy+' '+cz);
		} else {
			countPotion++;
		}
		
		////////////////////
		//STABBY ZOMBIE / POPPET HANDLING
		////////////////////
		
		var pCount = npc.getTempData(\"pCount\"); //counter for managing poppet magic
		var pTarget = npc.getTempData(\"pTarget\"); //target for the magic
		
		if (pCount == 1) {			
			pCount++;
			world.spawnClone(ox-0.5,oy,oz+0.5,2,\"Poppet\"); //Summon the invisible npc that holds the poppet, as witch npcs cannot
		} else if (pCount == 4) {
			npc.swingHand();
			throwBack(pTarget, 0.4);
			npc.executeCommand('/playsound whoosh @a '+px+' '+py+' '+pz);
			pCount++;
		} else if (pCount == 7) {
			npc.swingHand();
			throwBack(pTarget, 0.4);
			npc.executeCommand('/playsound whoosh @a '+px+' '+py+' '+pz);
			pCount = 0;	
		} else if ((pCount > 1 && pCount < 4) || (pCount > 4 && pCount < 7)) {
			pCount++;
		}
		
		npc.setTempData(\"pCount\",pCount);
		
		//////////
		//BARRIERS
		/////////
		
		var maxCount;
		
		/////////////////////
		//FIRST BARRIER PHASE
		/////////////////////
		if (phase == \"barrier1\" && !debug) {
			//Set the time for the next barrier to appear to a random value between 1 and 3 seconds ()
			//if it isn't set
			if (!npc.hasTempData(\"maxCountBarrier\") || npc.getTempData(\"maxCountBarrier\") == \"reset\") {
				maxCount = 2 + Math.random()*4;
				// npc.executeCommand('/tellraw @a '+maxCount);
			} else {
				maxCount = npc.getTempData(\"maxCountBarrier\");
			}
			
			//Place barrier and set maxcount to a random value (see above)
			if (count >= maxCount) {
				maxCount = \"reset\";
				count = 0;
				// npc.executeCommand('/tellraw @a barrier');
				
				//Actuall filling, make a 5x6x1 barrier that lasts 10 seconds 2 blocks in front of the player
				//Don't if the barrier would be over the npc
				if (px+2 != ox) {
					fill(px+2,py,pz-2,px+2,py+5,pz+2,\"witchery:barrier\",0,\"{remainingTicks:\"+barrierTicks+\",blocksPlayers:1}\");
					npc.executeCommand('/playsound magic.wall @a '+(px+2)+' '+py+' '+pz);
				}
			} else {
			//Count upwards
				count++;
				// npc.executeCommand(\"/tellraw @a \"+count);
			}
		/////////////////////
		//SECOND BARRIER PHASE
		/////////////////////
		} else if (phase == \"barrier2\" && !debug) {
			maxCount = 5;
			
			//Place barrier and set maxcount to a random value (see above)
			if (count >= maxCount) {
				// maxCount = \"reset\";
				count = 0;
				// npc.executeCommand('/tellraw @a barrier');
				
				//Make a room-width barrier that lasts 10 seconds with a random 3x3 opening
				//The barrier is placed in the nearest position divisible by 4
				
				var fillx = Math.ceil((px+2)/4)*4; //The x for the wall
				var openingz = oz+Math.random()*12-6;
				
				//Create barrier
				fill(fillx,oy-1,oz-9,fillx,oy+13,oz+9,\"witchery:barrier\",0,\"{remainingTicks:\"+barrierTicks+\",blocksPlayers:1}\");
				//Create opening
				fill(fillx,oy-1,openingz-1,fillx,oy+1,openingz+1,\"air\",0,\"\",true,\"witchery:barrier\");
				npc.executeCommand('/playsound magic.wall @a '+fillx+' '+oy+' '+openingz);
			} else {
			//Count upwards
				count++;
				// npc.executeCommand(\"/tellraw @a \"+count);
			}
		}
		
		npc.setTempData(\"maxCountSummon\",maxCountSummon);
		npc.setTempData(\"countPotion\",countPotion);
		npc.setTempData(\"maxCountPotion\",maxCountPotion);
		npc.setTempData(\"countSummon\",countSummon);
		npc.setTempData(\"maxCountBarrier\",maxCount);
		
	}
////////////////////////////
///////ESCAPE PHASE
///////////////////////////
//Check on the summoned dummy escaping npc, set health to his health, when he dies go to ghost phase after 3 seconds and summon the ghost
} else if (phase == \"escape\") {
	npc.setPosition(ox,oy,oz);
	if (world.getBlock(ox,oy-1,oz) == null) {
		world.setBlock(ox,oy-1,oz,world.createItem(\"minecraft:bedrock\",0,1));
	}
	
	var esId = npc.getStoredData(\"esId\");
	var esNpc = world.getMCWorld().func_73045_a(esId); //getEntityById
	// npc.say(\"Loaded id:\"+esId);
	
	if (esNpc == null) {
		if (count < 6) {
			count++;
		} else {
			count=0;
			npc.setStoredData(\"phase\",\"ghost\");
			
			world.setBlock(ox+4,oy,oz,null);
			world.setBlock(ox+4,oy-1,oz,null);
			
			var ghNpc = world.spawnClone(ox-5,oy-1,oz,2,\"Soul of the Coven Leader\");
			npc.executeCommand('/playsound2 ghost.loop loop @a '+(ox-10)+' '+oy+' '+oz+' 3.0');
			var myId = npc.getMCEntity().func_145782_y(); //getEntityId
			ghNpc.setStoredData(\"owId\",myId); 
			// npc.say(\"Stored id:\"+myId);
		}
	} else {
		var esHealth = esNpc.func_110143_aJ(); //getHealth
		// npc.say(health); 
		if (esHealth == 0) {esHealth = 1;}
		npc.setHealth(esHealth);
	}
} else if (phase == \"ghost\") {	
	var players = npc.getSurroundingEntities(40,1);
	var poppet = world.createItem(\"ModpackStuff:activator\",3,1);
	
	if (players !== null) {
		for (i=0;i<players.length;i++) {
			var count = players[i].inventoryItemCount(poppet);
			if (count > 0) {
				players[i].removeItem(poppet,count);
				npc.executeCommand('/playsoundb mob.ghast.fireball normal '+players[i].getName()+' 1 0.7');
				npc.executeCommand('/playsound2 ghost.loop stop @a '+(ox-10)+' '+oy+' '+oz);
				npc.despawn();
			}
		}
	}
}

npc.setStoredData(\"count\",count);",
            "ScriptConsole": "",
            "Type": 1,
            "ScriptList": [
            ]
        },
        {
            "Script": "var throwBack = eval(npc.getStoredData(\"throwBack\"));
	var fill = eval(npc.getStoredData(\"fill\"));
	
	var phase = npc.getStoredData(\"phase\");
	var health = npc.getHealth()-event.getDamage();
	var maxHealth = npc.getMaxHealth();
	var hitcount = npc.getStoredData(\"hitcount\");
	
	var ox = npc.getStoredData(\"ox\");
	var oy = npc.getStoredData(\"oy\");
	var oz = npc.getStoredData(\"oz\");
	
	if (event.getSource() == null || event.getSource().getType() != 1 || phase == \"escape\" || phase == \"ghost\") {
		event.setCancelled(true);
	}
	
	if (health <= 0) {
		event.setCancelled(true);
		health = 1;
		npc.setHealth(health);
	}
	
	if (phase == \"barrier1\" || phase == \"barrier2\") {
		if (hitcount < 1) {
			hitcount++
		} else {
			var nearbyPlayers = npc.getSurroundingEntities(10,1);
			
			if (nearbyPlayers != null) {
				for (i=0;i<nearbyPlayers.length;i++) {					
					nearbyPlayers[i].setPosition(ox-26.5,oy-1,oz+0.5);
					npc.executeCommand(\"/playsound mob.endermen.portal @a \" + ox-27 + \" \" + oy-1 + \" \" + oz);
					
					// npc.executeCommand('/tellraw @a \"teleporting '+nearbyPlayers[i].getName()+' to '+(ox-27)+' '+(oy-1)+' '+oz+'\"');
				}
			}

			hitcount = 0;
		}
	}
	
	if (health < maxHealth/3*2 && phase == \"barrier1\") {
		npc.setStoredData(\"phase\",\"barrier2\");
		// npc.executeCommand('/tellraw @a barrier2')
	} else if (health < maxHealth/3 && phase == \"barrier2\") {
		npc.setStoredData(\"phase\",\"giant\");
		npc.setRetaliateType(0);
	} else if (health < maxHealth/15 && phase == \"giant\") {
		npc.setStoredData(\"phase\",\"escape\");
		npc.setRetaliateType(3);
		npc.setPosition(ox,oy,oz);
		npc.setVisibleType(1);
		npc.clearPotionEffects();
		npc.setStoredData(\"count\",0);
		
		var esNpc = world.spawnClone(ox-5,oy-1,oz,2,\"Escaping Coven Leader\");
		var esId = esNpc.getMCEntity().func_145782_y(); //getEntityId
		npc.setStoredData(\"esId\",esId); 
		// npc.say(\"Stored id:\"+esId);
	}
	
	// npc.say(\"ouch \"+hitcount);
	npc.setStoredData(\"hitcount\",hitcount);	",
            "ScriptConsole": "",
            "Type": 4,
            "ScriptList": [
            ]
        }
    ],
    "Air": 300s,
    "TacticalVariant": 0,
    "Orientation": 90,
    "ScriptLanguage": "ECMAScript",
    "KnockBack": 0,
    "TransformHasJob": 0b,
    "CustomName": "",
    "CanDespawn": 0b,
    "BurnInSun": 0b,
    "StandingState": 1,
    "AttackInvisible": 0b,
    "HurtTime": 0s,
    "WalkingRange": 10,
    "CustomNameVisible": 0b,
    "ShotCount": 1,
    "pDur": 5,
    "AttackRange": 3,
    "NpcKillLines": {
        "Lines": [
        ]
    },
    "PotionImmune": 0b,
    "AvoidsSun": 0b,
    "Texture": "customnpcs:textures/covenleader.png",
    "NpcJob": 0,
    "BurstCount": 1,
    "NpcAttackLines": {
        "Lines": [
        ]
    },
    "pSpeed": 10,
    "pArea": 0,
    "DeathTime": 0s,
    "pImpact": 0,
    "DropChances": [
        0.085f,
        0.085f,
        0.085f,
        0.085f,
        0.085f
    ],
    "MoveState": 0,
    "RangeAndMelee": 0,
    "pRender3D": 0b,
    "Motion": [
        0.0d,
        -0.0784000015258789d,
        0.0d
    ],
    "CombatRegen": 50,
    "pEffect": 0,
    "DistanceToMelee": 4,
    "NpcStepSound": "",
    "FireRate": 5,
    "pEffAmp": 0,
    "OnGround": 1b,
    "Dimension": 0,
    "ImmuneToFire": 0b,
    "NpcKilledLines": {
        "Lines": [
        ]
    },
    "CreatureInfusion": {
        "PlayerInfusions": [0,0,0,0,0,0,0,0,0,0,0,0],
        "InfusionCosts": {
            "Aspects": [
            ]
        },
        "tumorWarpTemp": 0,
        "Infusions": [0,0,0,0,0,0,0,0,0,0,0,0],
        "toggleClimb": 0b,
        "toggleInvisible": 0b,
        "tumorWarp": 0,
        "sitting": 0b,
        "tumorWarpPermanent": 0
    },
    "UUIDMost": 104679978717845L,
    "Fire": -1s,
    "DisablePitch": 0b,
    "pPhysics": 1b,
    "TransformHasInv": 0b,
    "NpcInteractLines": {
        "Lines": [
        ]
    },
    "pSpin": 0b,
    "NpcHurtSound": "minecraft:game.player.hurt",
    "pTrail": 0,
    "CreatureType": 1,
    "Attributes": [
        {
            "Base": 300.0d,
            "Name": "generic.maxHealth"
        },
        {
            "Base": 0.0d,
            "Name": "generic.knockbackResistance"
        },
        {
            "Base": 0.25d,
            "Name": "generic.movementSpeed"
        },
        {
            "Base": 32.0d,
            "Name": "generic.followRange"
        },
        {
            "Base": 10.0d,
            "Name": "generic.attackDamage"
        }
    ],
    "Invulnerable": 0b,
    "TransformHasDisplay": 0b,
    "NoFallDamage": 0b,
    "AbsorptionAmount": 0.0f,
    "TransformHasRole": 0b,
    "Name": "Coven Leader",
    "FallDistance": 0.0f,
    "NpcIdleSound": "",
    "Weapons": [
    ],
    "NPCDialogOptions": [
    ],
    "AggroRange": 50,
    "DirectLOS": 1b,
    "HealthRegen": 50,
    "NpcModelData": {
        "LegsConfig": {
            "ScaleZ": 1.0f,
            "TransZ": 0.0f,
            "TransY": 0.0f,
            "TransX": 0.0f,
            "ScaleY": 1.0f,
            "ScaleX": 1.0f
        },
        "BodyConfig": {
            "ScaleZ": 1.0f,
            "TransZ": 0.0f,
            "TransY": 0.0f,
            "TransX": 0.0f,
            "ScaleY": 1.0f,
            "ScaleX": 1.0f
        },
        "EntityClass": "com.emoniph.witchery.entity.EntityCovenWitch",
        "LegParts": {
            "Type": 0b,
            "PlayerTexture": 1b,
            "Color": 16777215
        },
        "Parts": [
        ],
        "Breasts": 0b,
        "Headwear": 2b,
        "ArmsConfig": {
            "ScaleZ": 1.0f,
            "TransZ": 0.0f,
            "TransY": 0.0f,
            "TransX": 0.0f,
            "ScaleY": 1.0f,
            "ScaleX": 1.0f
        },
        "ExtraData": {
        },
        "HeadConfig": {
            "ScaleZ": 1.0f,
            "TransZ": 0.0f,
            "TransY": 0.0f,
            "TransX": 0.0f,
            "ScaleY": 1.0f,
            "ScaleX": 1.0f
        }
    },
    "minDelay": 20,
    "DoorInteract": 2,
    "MoveSpeed": 5,
    "TransformEditingModus": 0b,
    "UsingSkinUrl": 0b,
    "Leashed": 0b,
    "SkinUrl": "",
    "CanSwim": 1b,
    "MaxHealth": 300,
    "HideBodyWhenKilled": 0b,
    "AttackSpeed": 10,
    "PotionDuration": 2,
    "maxDelay": 40,
    "ScriptEnabled": 1b,
    "Role": 0,
    "DropChance": [
        {
            "Integer": 100,
            "Slot": 0
        },
        {
            "Integer": 100,
            "Slot": 1
        },
        {
            "Integer": 100,
            "Slot": 2
        },
        {
            "Integer": 100,
            "Slot": 3
        },
        {
            "Integer": 100,
            "Slot": 4
        },
        {
            "Integer": 100,
            "Slot": 5
        },
        {
            "Integer": 100,
            "Slot": 6
        },
        {
            "Integer": 100,
            "Slot": 7
        },
        {
            "Integer": 100,
            "Slot": 8
        }
    ],
    "FactionPoints": {
        "DecreaseFaction1Points": 0b,
        "OptionFaction2Points": 100,
        "OptionFactions1": -1,
        "OptionFactions2": -1,
        "OptionFaction1Points": 100,
        "DecreaseFaction2Points": 0b
    },
    "pDamage": 4,
    "KilledTime": 0L,
    "AimWhileShooting": 0b,
    "CanPickUpLoot": 0b,
    "AttackOtherFactions": 0b,
    "CanDrown": 0b,
    "AttackTime": 0s,
    "pSize": 5,
    "CanSprint": 0b,
    "CanLeap": 0b,
    "TransformIsActive": 0b,
    "ForgeData": {
        "WITCInitialWidth": 0.6f,
        "CNPCStoredData": {
            "phase": "start",
            "esId": 312952.0d,
            "count": 3.0d,
            "ox": 20244.0d,
            "oy": 64.0d,
            "oz": 20033.0d,
            "fill": "function(x,y,z,x2,y2,z2,block,dmg,nbt,replaceSolid,replaceWhat,debug) {
			if (replaceSolid == undefined || replaceSolid === null) {replaceSolid = false;}
			if (debug == undefined || debug === null) {debug = false;}
			
			if (x2<x || y2<y || z2<z) {
				npc.say(\"Wrong usage of fill, the second coords should be higher!\");
			} else {
				for (i=0;i<(x2-x+1);i++) {
					for (j=0;j<(y2-y+1);j++) {			
						for (k=0;k<(z2-z+1);k++) {
							var blockTest = world.getBlock(x+i,y+j,z+k);
							if (replaceSolid && blockTest !== null) {
								if (replaceWhat == undefined || replaceWhat === null || blockTest.getName() == replaceWhat) {
									npc.executeCommand(\"/setblock \"+(x+i)+\" \"+(y+j)+\" \"+(z+k)+\" \"+block+\" \"+dmg+\" replace \"+nbt);
								}
								if (debug) {npc.say(block);}
							} else if (blockTest === null) {
								npc.executeCommand(\"/setblock \"+(x+i)+\" \"+(y+j)+\" \"+(z+k)+\" \"+block+\" \"+dmg+\" replace \"+nbt);
								if (debug) {npc.say(block);}							
							}
						}
					}
				}
			}
		}",
            "poId": 54322.0d,
            "fillLine": "function (x,y,z,dir,length,block,dmg,nbt,replaceSolid) {
		if (dir == \"x\") {
			for (i=0;i<length;i++) {
				var block = world.getBlock(x+i,y,z);
				if (block == null || replaceSolid) {
					npc.executeCommand(\"/setblock \"+(x+i)+\" \"+y+\" \"+z+\" \"+block+\" \"+dmg+\" replace \"+nbt);
				}
			}
		} else if (dir == \"y\") {
			for (i=0;i<length;i++) {
				var block = world.getBlock(x,y+i,z);
				if (block == null || replaceSolid) {
					npc.executeCommand(\"/setblock \"+x+\" \"+(y+i)+\" \"+z+\" \"+block+\" \"+dmg+\" replace \"+nbt);
				}
			}
		} else if (dir == \"z\") {
			for (i=0;i<length;i++) {
				var block = world.getBlock(x,y,z+i);
				if (block == null || replaceSolid) {
					npc.executeCommand(\"/setblock \"+x+\" \"+y+\" \"+(z+i)+\" \"+block+\" \"+dmg+\" replace \"+nbt);
				}
			}
		} else {
			npc.say(\"Wrong syntax on fillLine!\");
		}
	}",
            "getRandArr": "function(array) {
			return(array[Math.floor(Math.random()*array.length)]);
		}",
            "throwBack": "function(player,strengthx,strengthy) {
			var fmcp = player.getMCEntity();
			if (!strengthx) {strengthx = 1}
			if (!strengthy) {strengthy = 1}
			
			//addVelocity(double,double,double)
			fmcp.func_70024_g(-3.5*strengthx,1.0*strengthy,Math.random()-0.5);
			//velocityChanged
			fmcp.field_70133_I = true;
		}",
            "escapingId": 156087.0d,
            "hitcount": 0.0d
        },
        "WITCInitialHeight": 1.95f
    },
    "MovingState": 0,
    "MovingPos": 0,
    "PotionAmp": 0,
    "OnAttack": 3,
    "TacticalRadius": 8,
    "MaxExp": 0,
    "OrderedLines": 0b,
    "PortalCooldown": 0,
    "pGlows": 0b,
    "TransformHasAdvanced": 0b,
    "TransformHasStats": 0b,
    "FiringSound": "random.bow",
    "ModRev": 16,
    "Accuracy": 60,
    "MinExp": 0,
    "Armor": [
    ],
    "CloakTexture": "",
    "GlowTexture": "",
    "MaxFiringRange": 15,
    "pXlr8": 0b,
    "UUIDLeast": 4810205481735555545L,
    "Health": 1s,
    "pExplode": 0b,
    "pStick": 0b,
    "MovingPause": 1b,
    "NpcDeathSound": "minecraft:game.player.hurt",
    "FactionID": 2,
    "Title": "CovenLeader",
    "TotalTicksAlive": 225673L,
    "Rotation": [
        90.0f,
        0.0f
    ],
    "ShowName": 1,
    "npcInteracting": 1b,
    "AvoidsWater": 0b,
    "Equipment": [
        {
        },
        {
        },
        {
        },
        {
        },
        {
        }
    ],
    "NoLivingAnimation": 0b,
    "SpawnCycle": 3
}
